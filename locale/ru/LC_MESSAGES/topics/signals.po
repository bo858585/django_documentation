# Russian translations for Django package.
# Copyright (C) Django Software Foundation and contributors
# This file is distributed under the same license as the Django package.
# Automatically generated, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Django 1.4\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-02-29 18:30\n"
"PO-Revision-Date: 2013-01-28 06:21+0300\n"
"Last-Translator: bo858585 <bo858585@gmail.com>\n"
"Language-Team: none\n"
"Language: ru\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=3; plural=(n%10==1 && n%100!=11 ? 0 : n%10>=2 && n%10<=4 && (n%100<10 || n%100>=20) ? 1 : 2);\n"

# 709e0b04633445269bdd5e390f2d898b
#: ../../topics/signals.txt:3
msgid "Signals"
msgstr "Сигналы"

# cedc08e669d8429d8ad0c551d3c69c27
#: ../../topics/signals.txt:8
msgid "Django includes a \"signal dispatcher\" which helps allow decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain *senders* to notify a set of *receivers* that some action has taken place. They're especially useful when many pieces of code may be interested in the same events."
msgstr "Django содержит \"диспетчер сигналов\", который позволяет одним приложениям фреймворка получать уведомления от других после того, как  в последних произойдут некоторые события. Вкратце, сигналы позволяют определенным *отправителям*  уведомлять некоторый набор *получателей* о совершении действий. Сигналы особенно полезны, когда поведение многих фрагментов кода зависит от инициации одних и тех же событий."

# b5cbd65f235b4edf99b9ab36b66c2bd9
#: ../../topics/signals.txt:14
msgid "Django provides a :doc:`set of built-in signals </ref/signals>` that let user code get notified by Django itself of certain actions. These include some useful notifications:"
msgstr "Django предоставляет набор встроенных сигналов, которые позволяют пользовательскому коду получать уведомление от Django об определенных событиях. Эти сигналы включают в себя некоторые полезные уведомления:"

# acf2461e738c41ff8d14b5e00e2555ad
#: ../../topics/signals.txt:18
msgid ":data:`django.db.models.signals.pre_save` & :data:`django.db.models.signals.post_save`"
msgstr ""

# 7c15b6672c1243de98343651c8cc5d6e
#: ../../topics/signals.txt:21
msgid "Sent before or after a model's :meth:`~django.db.models.Model.save` method is called."
msgstr "Отправляются до или после вызова метода :meth:`~django.db.models.Model.save` модели."

# 237e5d13f8d04af481e487f2b3561935
#: ../../topics/signals.txt:24
msgid ":data:`django.db.models.signals.pre_delete` & :data:`django.db.models.signals.post_delete`"
msgstr ""

# 32cd78176a2c4ed9ad21e1dbee237477
#: ../../topics/signals.txt:27
msgid "Sent before or after a model's :meth:`~django.db.models.Model.delete` method or queryset's :meth:`~django.db.models.query.QuerySet.delete` method is called."
msgstr "Отправляются до или после вызова метода :meth:`~django.db.models.Model.delete` модели или :meth:`~django.db.models.query.QuerySet.delete` класса QuerySet."

# a933a55670c44664a0747c6fab2fc7b0
#: ../../topics/signals.txt:31
msgid ":data:`django.db.models.signals.m2m_changed`"
msgstr ""

# 999627be2c0848a9af2202757d6ed63c
#: ../../topics/signals.txt:33
msgid "Sent when a :class:`ManyToManyField` on a model is changed."
msgstr "Отправляются после изменения :class:`ManyToManyField` в модели."

# 2fd572cd7a3b4016b6c75cdd2ec93273
#: ../../topics/signals.txt:35
msgid ":data:`django.core.signals.request_started` & :data:`django.core.signals.request_finished`"
msgstr ""

# 1d3e56dbb98e45bca3b3a6bb656ba6e2
#: ../../topics/signals.txt:38
msgid "Sent when Django starts or finishes an HTTP request."
msgstr "Отправляются, когда Django начинает или заканчивает HTTP запрос."

# a036e10315d14711adab7ae3c61d4483
#: ../../topics/signals.txt:40
msgid "See the :doc:`built-in signal documentation </ref/signals>` for a complete list, and a complete explanation of each signal."
msgstr "Полный список этих сигналов, а также  описание каждого сигнала, см. в :doc:`документации по встроенным сигналам </ref/signals>`."

# bd84fb9b12f4412d91f33c6c09ab6099
#: ../../topics/signals.txt:43
msgid "You can also `define and send your own custom signals`_; see below."
msgstr "Вы можете также `определять и посылать свои собственные сигналы`_; см. ниже."

# 00df3f63b44546faaf732b0d28c6fa56
#: ../../topics/signals.txt:48
msgid "Listening to signals"
msgstr "Прослушивание сигналов"

# dc46276797a747fc9d4364e439e3b207
#: ../../topics/signals.txt:50
msgid "To receive a signal, you need to register a *receiver* function that gets called when the signal is sent by using the :meth:`.Signal.connect` method:"
msgstr "Для того, чтобы принять сигнал, Вам необходимо с помощью метода :meth:`.Signal.connect` зарегистрировать функцию *receiver*, которая вызывается, когда сигнал послан:"

# a2af84686e054a5c9b35290c85602202
#: ../../topics/signals.txt:71
msgid "Let's see how this works by registering a signal that gets called after each HTTP request is finished. We'll be connecting to the :data:`~django.core.signals.request_finished` signal."
msgstr "Давайте посмотрим, как это работает, зарегистрировав сигнал :data:`~django.core.signals.request_finished`, который вызывается после завершения выполнения HTTP запроса."

# 89263935819744c6adf649f33d4c1d16
#: ../../topics/signals.txt:78
msgid "Receiver functions"
msgstr "Функции-получатели"

# 09c82838de604454a6f40746291966fb
#: ../../topics/signals.txt:80
msgid "First, we need to define a receiver function. A receiver can be any Python function or method:"
msgstr "Во-первых, мы должны определить функцию-получатель. Получатель должен быть Python функцией или методом следующего вида:"

# c0ecdfd6dcbb408f9d1d5c3d0bd5c23c
#: ../../topics/signals.txt:88
msgid "Notice that the function takes a ``sender`` argument, along with wildcard keyword arguments (``**kwargs``); all signal handlers must take these arguments."
msgstr "Заметьте, что функция принимает аргумент ``sender``, а также аргументы (``**kwargs``) в формате словаря; все обработчики сигналов должны принимать подобные аргументы."

# c9f2316e1e0f46f590cc713ee2db3946
#: ../../topics/signals.txt:91
msgid "We'll look at senders `a bit later`_, but right now look at the ``**kwargs`` argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of :data:`~django.core.signals.request_finished`, it's documented as sending no arguments, which means we might be tempted to write our signal handling as ``my_callback(sender)``."
msgstr "Отправителей мы рассмотрим `чуть позже`_, а сейчас обратите внимание на аргументы ``**kwargs``. Все сигналы имеют возможность посылать именованные аргуметы и могут изменить их набор в любой момент. Сигнал :data:`~django.core.signals.request_finished`  документирован как не посылающий аргументов, и у нас может появиться искушение записывать наш обработчик  сигнала в виде ``my_callback(sender)``."

# de1629cd68ac48a39d8c3365a7a6c9f3
#: ../../topics/signals.txt:100
msgid "This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments."
msgstr "Это было бы неверно -- на самом деле, Django выдаст ошибку, если Вы это сделаете. Так произойдет, потому что при любом вызове аргументы могут быть добавлены к сигналу и получатель должен быть в состоянии обработать эти новые аргументы."

# 104596e09975419fb23c12deb638fb8d
#: ../../topics/signals.txt:107
msgid "Connecting receiver functions"
msgstr "Регистрация функции-получателя"

# f6b13043424247199d0f9ee794a33d5b
#: ../../topics/signals.txt:109
msgid "There are two ways you can connect a receiver to a signal. You can take the manual connect route:"
msgstr "Есть два способа, которыми Вы можете подключить получатель к сигналу. Вы можете вручную вызвать connect:"

# e926cfa5e44b428b8e12e409920b9685
#: ../../topics/signals.txt:118
msgid "Alternatively, you can use a ``receiver`` decorator when you define your receiver:"
msgstr "Кроме того, вы можете использовать декоратор ``receiver`` при определении вашего получателя:"

# 0804e201f6984fc9bd5edb1714713d22
#: ../../topics/signals.txt:130
msgid "Now, our ``my_callback`` function will be called each time a request finishes."
msgstr "Теперь наша функция ``my_callback`` будет вызываться каждый раз, когда запрос завершается."

# 86fa43b095e34ccabdbf8ed733c1b1dc
#: ../../topics/signals.txt:134
msgid "The ``receiver`` decorator was added in Django 1.3."
msgstr "Декоратор ``receiver`` был добавлен в Django 1.3."

# e97c060877b74113bd0c733ed104b6b9
#: ../../topics/signals.txt:138
msgid "You can put signal handling and registration code anywhere you like. However, you'll need to make sure that the module it's in gets imported early on so that the signal handling gets registered before any signals need to be sent. This makes your app's ``models.py`` a good place to put registration of signal handlers."
msgstr "Вы можете расположить обработчик сигнала и регистрировать его там, где Вам удобно. Тем не менее, вы должны убедиться, что регистрация обработчика сигнала происходит до того, как он будет отправлен. Поэтому файл models.py вашего приложения хорошо подходит для регистрации обработчиков сигналов."

# 41e8a0544ebc4b71826e0b64b63fdc68
#: ../../topics/signals.txt:147
msgid "Connecting to signals sent by specific senders"
msgstr "Сигналы, получаемые от определенных отправителей."

# d4f90bb4f1cd4bc2a072ba3ecd7b0b35
#: ../../topics/signals.txt:149
msgid "Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals. For example, consider the :data:`django.db.models.signals.pre_save` signal sent before a model gets saved. Most of the time, you don't need to know when *any* model gets saved -- just when one *specific* model is saved."
msgstr "Некоторые сигналы могу быть посланы много раз, но Вам будет нужно получать только  определенное подмножество этих сигналов. Например, рассмотрим :data:`django.db.models.signals.pre_save` - сигнал, посылаемый перед сохранением модели. Бывает, что Вам не нужно знать о сохранении любой модели, Вас интересует только одна конкретная модель:"

# 90fd1199c2d142d7af468219d8cfcce9
#: ../../topics/signals.txt:155
msgid "In these cases, you can register to receive signals sent only by particular senders. In the case of :data:`django.db.models.signals.pre_save`, the sender will be the model class being saved, so you can indicate that you only want signals sent by some model:"
msgstr "В этих случаях Вы можете получать только сигналы, посыланные определенными отправителями. В случае :data:`django.db.models.signals.pre_save` отправитель будет сохраняемой моделью некторого класса, так что вы можете указать, что вы хотите получать только сигналы, посылаемые этой моделью:"

# be20662e65cd411bb5bb10692b8105bf
#: ../../topics/signals.txt:170
msgid "The ``my_handler`` function will only be called when an instance of ``MyModel`` is saved."
msgstr "Функция ``my_handler`` будет вызвана только при сохранении объекта класса ``MyModel``."

# 102bc0931719454987f316d4be75cd61
#: ../../topics/signals.txt:173
msgid "Different signals use different objects as their senders; you'll need to consult the :doc:`built-in signal documentation </ref/signals>` for details of each particular signal."
msgstr "Отправителями различных сигналов могут быть различные различные объекты. Для получения детальной информации по каждому такому сигналу обращайтесь к :doc:`документации по встроенным сигналам </ref/signals>`."

# 23c26373b2de4e6eaaabc467d0138214
#: ../../topics/signals.txt:180
msgid "Preventing duplicate signals"
msgstr "Предотвращение дублирования сигналов"

# 2847d49930604b3ab4fc10cee303c802
#: ../../topics/signals.txt:182
msgid "In some circumstances, the module in which you are connecting signals may be imported multiple times. This can cause your receiver function to be registered more than once, and thus called multiples times for a single signal event."
msgstr "В некоторых случаях модуль, в котором Вы подключаете сигналы, может быть импортирован несколько раз. Это может привести к тому, что получатель сигнала  будет зарегистрирован несколько раз, и таким образом, вызов сигнала произойдет несколько раз при наступлении одного и того же события."

# ec23c77952f747d1b7e458c56e90df30
#: ../../topics/signals.txt:187
msgid "If this behavior is problematic (such as when using signals to send an email whenever a model is saved), pass a unique identifier as the ``dispatch_uid`` argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique ``dispatch_uid`` value."
msgstr "Такое поведение может приводить к проблемам (например, если происходит отправка электронной почты всякий раз, когда посылается сигнал о сохранении модели), поэтому передавайте некоторый уникальный идентификатор в качестве значения аргумента ``dispatch_uid`` для идентификации в функции-получателе. Обычно, этот идентификатор является строкой, хотя подойдет любой хешируемый объект. В итоге функция-получатель будет привязана к сигналу единожды для каждого уникального значения ``dispatch_uid``."

# 360400afe91e47b3959912ab7a9b41ca
#: ../../topics/signals.txt:201
msgid "Defining and sending signals"
msgstr "Создание и посылка сигналов."

# 8762e59a04024aa6a070719ac40d4650
#: ../../topics/signals.txt:203
msgid "Your applications can take advantage of the signal infrastructure and provide its own signals."
msgstr "Вы может создавать свои собственные сигналы в Ваших приложениях."

# 653c289e6ed84f90b9325c834c4f8467
#: ../../topics/signals.txt:207
msgid "Defining signals"
msgstr "Создание сигналов"

# 0215405b67894438829a74a2f16a1303
#: ../../topics/signals.txt:211
msgid "All signals are :class:`django.dispatch.Signal` instances. The ``providing_args`` is a list of the names of arguments the signal will provide to listeners."
msgstr "Все сигналы являются экземплярами класса  :class:`django.dispatch.Signal`, где ``providing_args`` - список названий аргументов сигнала, которые будут доступны слушателям."

# a876236a58ed4496ba55fe02ee4d8c33
#: ../../topics/signals.txt:215
msgid "For example:"
msgstr "Например:"

# 3fa3757b1eee4f6f90d9bbbc8f84bb3c
#: ../../topics/signals.txt:223
msgid "This declares a ``pizza_done`` signal that will provide receivers with ``toppings`` and ``size`` arguments."
msgstr "Это объявление сигнала ``pizza_done``, который предоставит получателям аргументы ``toppings`` и ``size``."

# 5cf07d797a5e42aaa2d6332efbc74d97
#: ../../topics/signals.txt:226
msgid "Remember that you're allowed to change this list of arguments at any time, so getting the API right on the first try isn't necessary."
msgstr "Вы можете задать в этом списке аргументов любые значения передаваемых параметров."

# 8cdb260b687e4f69a70360d938938458
#: ../../topics/signals.txt:229
msgid "Sending signals"
msgstr "Отправка сигналов"

# 52cd4075802346758dd4ee3417bc6c5a
#: ../../topics/signals.txt:231
msgid "There are two ways to send send signals in Django."
msgstr "В Django существует два способа отправки сигналов."

# 229c517baa6c43a185c16699c7a3518e
#: ../../topics/signals.txt:236
msgid "To send a signal, call either :meth:`Signal.send` or :meth:`Signal.send_robust`. You must provide the ``sender`` argument, and may provide as many other keyword arguments as you like."
msgstr "Для отправки сигнала необходимо вызвать  :meth:`Signal.send` или :meth:`Signal.send_robust`. Вы обязательно должны указать аргумент ``sender``, кроме того можно указать сколько угодно других именованных аргументов."

# 13e9903325a94edeac7efaa12341f282
#: ../../topics/signals.txt:240
msgid "For example, here's how sending our ``pizza_done`` signal might look:"
msgstr "Например, вот как может выглядать отправка сигнала ``pizza_done``."

# a505ed071edd45b7958fcf1e65fb4f9e
#: ../../topics/signals.txt:251
msgid "Both ``send()`` and ``send_robust()`` return a list of tuple pairs ``[(receiver, response), ... ]``, representing the list of called receiver functions and their response values."
msgstr "И ``send()``, и ``send_robust()`` возвращают список кортежей пар ``[(receiver, response), ... ]``. Каждый кортеж содержит вызываемую функцию и ее ответ."

# bdc7c750ebf247f791021c9e00fe81fa
#: ../../topics/signals.txt:255
msgid "``send()`` differs from ``send_robust()`` in how exceptions raised by receiver functions are handled. ``send()`` does *not* catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error."
msgstr "``send()`` отличается от ``send_robust()`` способом обработки исключений, генерируемых функцией-получателем. ``send()`` *не* ловит никаких исключений, сгенерированных в получателе, позволяя исключению проваливаться дальше. Таким образом, не все получатели могут получить сигнал при возникновении ошибки."

# 28f94531ee6d4885bb64f35e1c94dd60
#: ../../topics/signals.txt:260
msgid "``send_robust()`` catches all errors derived from Python's ``Exception`` class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error."
msgstr "``send_robust()`` перехватывает все ошибки, наследуемые от класса ``Exception`` языка Python, и гарантирует, что сигнал дойдет до всех получателей. Если произойдет ошибка в одном из них, экземпляр исключения будет помещен в response в кортеже, который соответствует вызываемой функции."

# d7b1465919154cd19b25ee832423e043
#: ../../topics/signals.txt:265
msgid "Disconnecting signals"
msgstr "Выключение сигнала"

# 88061ce91e76476ba6ddb5aed8965aaf
#: ../../topics/signals.txt:269
msgid "To disconnect a receiver from a signal, call :meth:`Signal.disconnect`. The arguments are as described in :meth:`.Signal.connect`."
msgstr "Чтобы отключить получатель от сигнала, назовите :meth:`Signal.disconnect`. Аргументы те же, что и у :meth:`.Signal.connect`."

# 1bce26d6c4ab487ea056f247a2639404
#: ../../topics/signals.txt:272
msgid "The *receiver* argument indicates the registered receiver to disconnect. It may be ``None`` if ``dispatch_uid`` is used to identify the receiver."
msgstr "В аргументе *receiver* указывается получатель, который должен перестать получать сигнал. *receiver* может быть ``None`` если для идентификации получателя используется ``dispatch_uid``."

